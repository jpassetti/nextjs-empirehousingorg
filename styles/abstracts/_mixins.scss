@use './vars';

@mixin breakpoint($value) {
	// need to validate $value

	// if a string use standard breakpoints
	@if type-of($value) == 'string' {
		@if ($value == "xs" or $value == "phone") {
			@media (max-width: 699px) {
				@content;
			}
		}
		@else if ($value == "sm" or $value == "tablet") {
			@media (min-width: 700px) {
				@content;
			}
		}

		@else if ($value == "md" or $value == "laptop") {
			@media(min-width: 980px) {
				@content;
			}
		}
		@else if($value == "lg" or $value == "desktop") {
			@media (min-width: 1140px) {
				@content;
			}
		}

		@else {
			@warn "Breakpoint mixin supports: xs or phone, sm or tablet, md or laptop, lg or desktop, xl or tvscreen as string variables";
		}

	} 
	// if value then use value as minimum width.
	@else if is-length($value){
		@media(min-width: #{$value}){
			@content;
		}
	}

	@else {
		@warn "Breakpoint mixin supports: string variables or relative units";
	}
	// if a length value than use that

	// error warn if string does not match or it is not a length
	
}

@mixin marginAndPadding() {
	$sizes: xs, sm, md, lg;
	$sides: top, right, bottom, left, all;
	@each $side in $sides {
		@each $size in $sizes {
			@for $i from 0 through 16 {
				@if $side == all {
					&.margin-#{$side}-#{$i} {
						margin: #{$i}rem;
					}
					@include breakpoint($size) {
						&.#{$size}-margin-#{$side}-#{$i} {
							margin: #{$i}rem;
						}
					}
					&.padding-#{$side}-#{$i} {
						padding: #{$i}rem;
					}
					@include breakpoint($size) {
						&.#{$size}-padding-#{$side}-#{$i} {
							padding: #{$i}rem;
						}
					}
				} @else {
					&.margin-#{$side}-#{$i} {
						margin-#{$side}: #{$i}rem;
					}
					@include breakpoint($size) {
						&.#{$size}-margin-#{$side}-#{$i} {
							margin-#{$side}: #{$i}rem;
						}
					}
					&.padding-#{$side}-#{$i} {
						padding-#{$side}: #{$i}rem;
					}
					@include breakpoint($size) {
						&.#{$size}-padding-#{$side}-#{$i} {
							padding-#{$side}: #{$i}rem;
						}
					}
				}
			}
		}
	}
}
@mixin alignItems() {
	$values: stretch, center, flex-start, flex-end, baseline, initial, inherit;
	@each $value in $values {
		&.align-items-#{$value} {
			display: flex;
			align-items: #{$value};
		}
	}
}
@mixin justifyContent() {
	$values: flex-start, flex-end, center, space-between, space-around, space-evenly, initial, inherit;
	@each $value in $values {
		&.justify-content-#{$value} {
			display: flex;
			justify-content: #{$value};
		}
	}
}
@mixin flexDirection() {
	$values: row, row-reverse, column, column-reverse, initial, inherit;
	@each $value in $values {
		&.flex-direction-#{$value} {
			display: flex;
			flex-direction: #{$value};
		}
	}
}
@mixin textAlign() {
	$sizes: xs, sm, md, lg;
	$values: left, right, center, justify, initial, inherit;
	@each $value in $values {
		@each $size in $sizes{
			&.text-align-#{$value} {
				text-align: #{$value};
			}
			@include breakpoint($size) {
				&.#{$size}-text-align-#{$value} {
					text-align: #{$value};
				}
			}
		}
	}
	
}
@mixin minHeights() {
	@for $i from 1 through 16 {
		&.height-#{$i}x {
			min-height: ($i*25) + vh;
		}
	}
}
@mixin colors() {
	$values: (
		"teal": vars.$color_teal, 
		"violet": vars.$color_violet_bold, 
		"blue": vars.$color_blue, 
		"white": vars.$color_white, 
		"black": vars.$color_black
	);
	@each $name, $color in $values {
		&.color-#{$name} {
			color: $color;
		}
	}
}
@mixin backgroundColors() {
	$values: (
		"teal": vars.$color_teal, 
		"violet": vars.$color_violet_bold, 
		"blue": vars.$color_blue, 
		"white": vars.$color_white, 
		"black": vars.$color_black,
		"none" : "transparent"
	);
	@each $name, $color in $values {
		&.background-color-#{$name} {
			background-color: $color;
		}
	}
}
@mixin backgroundGradients() {
	&.background-gradient-violet {
		background: linear-gradient(vars.$color_magenta, vars.$color_violet);
		color: white !important;
		h2 {
			color: white;
		}
	}
	&.background-gradient-blue {
		background: linear-gradient(90deg, vars.$color_blue, vars.$color_violet_bold);
		color: white !important;
		h2 {
			color: white;
		}
	}
	&.background-gradient-light_violet {
		background: linear-gradient(vars.$color_teal_20, vars.$color_violet_20);
	}
	&.background-gradient-teal {
		background: linear-gradient(vars.$color_teal, vars.$color_blue);
		color: white !important;
		h2 {
			color: white;
		}
	}
	&.background-gradient-light_teal {
		background: linear-gradient(vars.$color_teal_10, vars.$color_teal_40);
	}
	&.background-gradient-none {
		background-color: transparent;
	}
		
}